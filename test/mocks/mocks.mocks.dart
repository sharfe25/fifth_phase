// Mocks generated by Mockito 5.4.2 from annotations
// in fifth_phase/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:connect_fake_store/connect_fake_store.dart' as _i4;
import 'package:connect_fake_store/controller/category_controller.dart' as _i3;
import 'package:connect_fake_store/controller/product_controller.dart' as _i2;
import 'package:connect_fake_store/models/category_model.dart' as _i7;
import 'package:connect_fake_store/models/product_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductController_0 extends _i1.SmartFake
    implements _i2.ProductController {
  _FakeProductController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoryController_1 extends _i1.SmartFake
    implements _i3.CategoryController {
  _FakeCategoryController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectFakeStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectFakeStore extends _i1.Mock implements _i4.ConnectFakeStore {
  MockConnectFakeStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductController get productController => (super.noSuchMethod(
        Invocation.getter(#productController),
        returnValue: _FakeProductController_0(
          this,
          Invocation.getter(#productController),
        ),
      ) as _i2.ProductController);

  @override
  _i3.CategoryController get categoryController => (super.noSuchMethod(
        Invocation.getter(#categoryController),
        returnValue: _FakeCategoryController_1(
          this,
          Invocation.getter(#categoryController),
        ),
      ) as _i3.CategoryController);
}

/// A class which mocks [ProductController].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductController extends _i1.Mock implements _i2.ProductController {
  MockProductController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.ProductModel> get products => (super.noSuchMethod(
        Invocation.getter(#products),
        returnValue: <_i5.ProductModel>[],
      ) as List<_i5.ProductModel>);

  @override
  List<_i5.ProductModel> get productsByCategory => (super.noSuchMethod(
        Invocation.getter(#productsByCategory),
        returnValue: <_i5.ProductModel>[],
      ) as List<_i5.ProductModel>);

  @override
  _i6.Future<void> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> getProductsByCategory({required String? category}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsByCategory,
          [],
          {#category: category},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [CategoryController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryController extends _i1.Mock
    implements _i3.CategoryController {
  MockCategoryController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.CategoryModel> get categories => (super.noSuchMethod(
        Invocation.getter(#categories),
        returnValue: <_i7.CategoryModel>[],
      ) as List<_i7.CategoryModel>);

  @override
  _i6.Future<void> getAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
